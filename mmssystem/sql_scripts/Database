
CREATE DATABASE IF NOT EXISTS mms;
USE mms;
CREATE TABLE Departments (
    department_id INT AUTO_INCREMENT PRIMARY KEY,
    department_name VARCHAR(255) NOT NULL,
    department_code VARCHAR(50) NOT NULL UNIQUE,
    description TEXT,
    created_at DATETIME DEFAULT CURRENT_TIMESTAMP,
    updated_at DATETIME DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
    deleted_at DATETIME DEFAULT NULL,
    INDEX idx_dept_code (department_code),
    INDEX idx_dept_deleted (deleted_at)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4;

CREATE TABLE Users (
    user_id INT AUTO_INCREMENT PRIMARY KEY,
    email VARCHAR(255) NOT NULL,
    password VARCHAR(255) NOT NULL,
    employee_code VARCHAR(50) NOT NULL,
    department_id INT NOT NULL,
    status ENUM('Active', 'Inactive') NOT NULL DEFAULT 'Active',
    otp_code VARCHAR(6) NULL,
    otp_expiry TIMESTAMP NULL,
    otp_used BOOLEAN DEFAULT FALSE,
    otp_attempts INT DEFAULT 0,
    last_otp_request_time DATETIME,
    last_login DATETIME,
    created_at DATETIME DEFAULT CURRENT_TIMESTAMP,
    updated_at DATETIME DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
    deleted_at DATETIME DEFAULT NULL,
    FOREIGN KEY (department_id) REFERENCES Departments(department_id) ON DELETE RESTRICT,
    UNIQUE KEY uq_email_deleted (email, deleted_at),
    UNIQUE KEY uq_employee_code_deleted (employee_code, deleted_at),
    INDEX idx_users_department (department_id),
    INDEX idx_users_status (status, deleted_at),
    INDEX idx_users_created (created_at),
    INDEX idx_users_login (last_login)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4;

CREATE TABLE Roles (
    role_id INT AUTO_INCREMENT PRIMARY KEY,
    role_name VARCHAR(255) NOT NULL UNIQUE,
    INDEX idx_role_name (role_name)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4;

CREATE TABLE User_Roles (
    user_id INT NOT NULL,
    role_id INT NOT NULL,
    PRIMARY KEY (user_id, role_id),
    FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE,
    FOREIGN KEY (role_id) REFERENCES Roles(role_id) ON DELETE CASCADE,
    INDEX idx_role_users (role_id)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4;

CREATE TABLE User_Profile (
    profile_id INT AUTO_INCREMENT PRIMARY KEY,
    user_id INT NOT NULL UNIQUE,
    first_name VARCHAR(255),
    last_name VARCHAR(255),
    gender ENUM('Male', 'Female', 'Other'),
    dob DATE,
    phone_number VARCHAR(50),
    address TEXT,
    avatar_url VARCHAR(255) DEFAULT NULL,
    FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4;

CREATE TABLE token_blacklist (
    id INT AUTO_INCREMENT PRIMARY KEY,
    token VARCHAR(500) NOT NULL UNIQUE,
    user_id INT NOT NULL,
    blacklisted_at TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP,
    expires_at TIMESTAMP NOT NULL,
    FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE,
    INDEX idx_token (token),
    INDEX idx_expires (expires_at)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4;

CREATE TABLE menu_items (
    menu_id INT AUTO_INCREMENT PRIMARY KEY,
    menu_key VARCHAR(50) NOT NULL UNIQUE,
    menu_label VARCHAR(100) NOT NULL,
    menu_path VARCHAR(255) NOT NULL,
    menu_icon VARCHAR(50),
    display_order INT DEFAULT 0,
    INDEX idx_menu_key (menu_key),
    INDEX idx_display_order (display_order)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4;

CREATE TABLE role_menus (
    role_id INT NOT NULL,
    menu_id INT NOT NULL,
    PRIMARY KEY (role_id, menu_id),
    FOREIGN KEY (role_id) REFERENCES Roles(role_id) ON DELETE CASCADE,
    FOREIGN KEY (menu_id) REFERENCES menu_items(menu_id) ON DELETE CASCADE
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4;

CREATE TABLE permissions (
    permission_id INT AUTO_INCREMENT PRIMARY KEY,
    permission_key VARCHAR(100) NOT NULL UNIQUE,
    permission_name VARCHAR(100) NOT NULL,
    resource VARCHAR(50) NOT NULL,
    action VARCHAR(50) NOT NULL,
    INDEX idx_permission_key (permission_key),
    INDEX idx_resource_action (resource, action)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4;

CREATE TABLE role_permissions (
    role_id INT NOT NULL,
    permission_id INT NOT NULL,
    PRIMARY KEY (role_id, permission_id),
    FOREIGN KEY (role_id) REFERENCES Roles(role_id) ON DELETE CASCADE,
    FOREIGN KEY (permission_id) REFERENCES permissions(permission_id) ON DELETE CASCADE
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4;

CREATE TABLE user_permissions (
    user_id INT NOT NULL,
    permission_id INT NOT NULL,
    expires_at DATETIME NULL,
    PRIMARY KEY (user_id, permission_id),
    FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE,
    FOREIGN KEY (permission_id) REFERENCES permissions(permission_id) ON DELETE CASCADE,
    INDEX idx_expires (expires_at)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4;

-- =====================================================
-- MASTER DATA: Addresses, Contacts, Customers, Vendors
-- =====================================================

CREATE TABLE Addresses (
    address_id INT AUTO_INCREMENT PRIMARY KEY,
    street VARCHAR(255),
    province_code VARCHAR(20),
    province_name VARCHAR(100),
    district_code VARCHAR(20),
    district_name VARCHAR(100),
    ward_code VARCHAR(20),
    ward_name VARCHAR(100),
    country VARCHAR(100),
    INDEX idx_province (province_code),
    INDEX idx_district (district_code),
    INDEX idx_ward (ward_code)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4;

CREATE TABLE Contacts (
    contact_id INT AUTO_INCREMENT PRIMARY KEY,
    phone VARCHAR(50),
    email VARCHAR(100),
    INDEX idx_phone (phone),
    INDEX idx_email (email)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4;

CREATE TABLE Customers (
    customer_id INT AUTO_INCREMENT PRIMARY KEY,
    first_name VARCHAR(255) NOT NULL,
    last_name VARCHAR(255) NOT NULL,
    address_id INT,
    contact_id INT,
    note TEXT,
    created_at DATETIME DEFAULT CURRENT_TIMESTAMP,
    updated_at DATETIME DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
    deleted_at DATETIME DEFAULT NULL,
    FOREIGN KEY (address_id) REFERENCES Addresses(address_id) ON DELETE SET NULL,
    FOREIGN KEY (contact_id) REFERENCES Contacts(contact_id) ON DELETE SET NULL,
    INDEX idx_customer_name (first_name, last_name),
    INDEX idx_customer_deleted (deleted_at)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4;

CREATE TABLE Vendors (
    vendor_id INT AUTO_INCREMENT PRIMARY KEY,
    name VARCHAR(255) NOT NULL,
    vendor_code VARCHAR(255) NOT NULL UNIQUE,
    address_id INT,
    contact_id INT,
    note TEXT,
    created_at DATETIME DEFAULT CURRENT_TIMESTAMP,
    updated_at DATETIME DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
    deleted_at DATETIME DEFAULT NULL,
    FOREIGN KEY (address_id) REFERENCES Addresses(address_id) ON DELETE SET NULL,
    FOREIGN KEY (contact_id) REFERENCES Contacts(contact_id) ON DELETE SET NULL,
    INDEX idx_vendor_code (vendor_code),
    INDEX idx_vendor_name (name),
    INDEX idx_vendor_deleted (deleted_at)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4;

-- =====================================================
-- PRODUCT & INVENTORY
-- =====================================================

CREATE TABLE Product_Categories (
    category_id INT AUTO_INCREMENT PRIMARY KEY,
    name VARCHAR(100) NOT NULL,
    deleted_at DATETIME DEFAULT NULL,
    INDEX idx_category_name (name),
    INDEX idx_category_deleted (deleted_at)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4;

CREATE TABLE Products (
    product_id INT AUTO_INCREMENT PRIMARY KEY,
    sku VARCHAR(50) NOT NULL UNIQUE,
    name VARCHAR(255) NOT NULL,
    description TEXT,
    uom VARCHAR(50),
    purchase_price DECIMAL(18, 2),
    selling_price DECIMAL(18, 2),
    status ENUM('In Stock', 'Out of Stock', 'Discontinued') NOT NULL DEFAULT 'In Stock',
    barcode VARCHAR(100),
    image_url VARCHAR(255),
    category_id INT,
    created_by INT,
    updated_by INT,
    created_at DATETIME DEFAULT CURRENT_TIMESTAMP,
    updated_at DATETIME DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
    deleted_at DATETIME DEFAULT NULL,
    FOREIGN KEY (category_id) REFERENCES Product_Categories(category_id) ON DELETE SET NULL,
    FOREIGN KEY (created_by) REFERENCES Users(user_id) ON DELETE SET NULL,
    FOREIGN KEY (updated_by) REFERENCES Users(user_id) ON DELETE SET NULL,
    INDEX idx_product_sku (sku),
    INDEX idx_product_name (name),
    INDEX idx_product_category (category_id),
    INDEX idx_product_status (status, deleted_at),
    INDEX idx_product_barcode (barcode)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4;

CREATE TABLE Warehouses (
    warehouse_id INT AUTO_INCREMENT PRIMARY KEY,
    name VARCHAR(100) NOT NULL,
    location VARCHAR(255),
    status ENUM('Active', 'Inactive') NOT NULL DEFAULT 'Active',
    created_by INT,
    updated_by INT,
    created_at DATETIME DEFAULT CURRENT_TIMESTAMP,
    updated_at DATETIME DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
    deleted_at DATETIME DEFAULT NULL,
    FOREIGN KEY (created_by) REFERENCES Users(user_id) ON DELETE SET NULL,
    FOREIGN KEY (updated_by) REFERENCES Users(user_id) ON DELETE SET NULL,
    INDEX idx_warehouse_name (name),
    INDEX idx_warehouse_status (status, deleted_at)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4;

CREATE TABLE Storage_Areas (
    storage_id INT AUTO_INCREMENT PRIMARY KEY,
    warehouse_id INT NOT NULL,
    name VARCHAR(100) NOT NULL,
    description TEXT,
    status ENUM('Available', 'Full') DEFAULT 'Available',
    created_at DATETIME DEFAULT CURRENT_TIMESTAMP,
    updated_at DATETIME DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
    deleted_at DATETIME DEFAULT NULL,
    FOREIGN KEY (warehouse_id) REFERENCES Warehouses(warehouse_id) ON DELETE CASCADE,
    INDEX idx_storage_warehouse (warehouse_id),
    INDEX idx_storage_status (status)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4;

CREATE TABLE Warehouse_Stock (
    warehouse_id INT NOT NULL,
    product_id INT NOT NULL,
    quantity DECIMAL(18, 2) NOT NULL DEFAULT 0,
    PRIMARY KEY (warehouse_id, product_id),
    FOREIGN KEY (warehouse_id) REFERENCES Warehouses(warehouse_id) ON DELETE CASCADE,
    FOREIGN KEY (product_id) REFERENCES Products(product_id) ON DELETE CASCADE,
    INDEX idx_stock_product (product_id)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4;

-- =====================================================
-- PURCHASE FLOW
-- =====================================================

CREATE TABLE Purchase_Plans (
    plan_id INT AUTO_INCREMENT PRIMARY KEY,
    plan_no VARCHAR(30) UNIQUE NOT NULL,
    title VARCHAR(255) NOT NULL,
    period_start DATE,
    period_end DATE,
    status ENUM('Draft', 'Pending', 'Approved', 'Rejected') DEFAULT 'Draft',
    notes TEXT,
    created_by INT,
    approved_by INT,
    approved_at DATETIME,
    created_at DATETIME DEFAULT CURRENT_TIMESTAMP,
    updated_at DATETIME DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
    deleted_at DATETIME DEFAULT NULL,
    FOREIGN KEY (created_by) REFERENCES Users(user_id) ON DELETE SET NULL,
    FOREIGN KEY (approved_by) REFERENCES Users(user_id) ON DELETE SET NULL,
    INDEX idx_plan_no (plan_no),
    INDEX idx_plan_status (status, deleted_at),
    INDEX idx_plan_period (period_start, period_end)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4;

CREATE TABLE Purchase_Plan_Items (
    plan_item_id INT AUTO_INCREMENT PRIMARY KEY,
    plan_id INT NOT NULL,
    product_id INT,
    product_code VARCHAR(50),
    product_name VARCHAR(255),
    spec TEXT,
    uom VARCHAR(50),
    planned_qty DECIMAL(18, 2) NOT NULL,
    target_unit_price DECIMAL(18, 2),
    needed_by DATE,
    note TEXT,
    status ENUM('Planned', 'Committed', 'Converted', 'Cancelled') DEFAULT 'Planned',
    created_at DATETIME DEFAULT CURRENT_TIMESTAMP,
    updated_at DATETIME DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
    FOREIGN KEY (plan_id) REFERENCES Purchase_Plans(plan_id) ON DELETE CASCADE,
    FOREIGN KEY (product_id) REFERENCES Products(product_id) ON DELETE SET NULL,
    INDEX idx_plan_item_plan (plan_id),
    INDEX idx_plan_item_product (product_id),
    INDEX idx_plan_item_status (status)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4;

CREATE TABLE Purchase_Requisitions (
    requisition_id INT AUTO_INCREMENT PRIMARY KEY,
    requisition_no VARCHAR(30) UNIQUE NOT NULL,
    plan_id INT,
    requester_id INT,
    department VARCHAR(100),
    cost_center VARCHAR(50),
    needed_by DATE,
    destination_warehouse_id INT,
    purpose TEXT,
    approval_status ENUM('Pending', 'Approved', 'Rejected') DEFAULT 'Pending',
    approver_id INT,
    approved_at DATETIME,
    total_estimated DECIMAL(18, 2) DEFAULT 0,
    status ENUM('Open', 'Closed', 'Cancelled') DEFAULT 'Open',
    created_at DATETIME DEFAULT CURRENT_TIMESTAMP,
    updated_at DATETIME DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
    deleted_at DATETIME DEFAULT NULL,
    FOREIGN KEY (plan_id) REFERENCES Purchase_Plans(plan_id) ON DELETE SET NULL,
    FOREIGN KEY (requester_id) REFERENCES Users(user_id) ON DELETE SET NULL,
    FOREIGN KEY (approver_id) REFERENCES Users(user_id) ON DELETE SET NULL,
    FOREIGN KEY (destination_warehouse_id) REFERENCES Warehouses(warehouse_id) ON DELETE SET NULL,
    INDEX idx_req_no (requisition_no),
    INDEX idx_req_status (status, approval_status, deleted_at),
    INDEX idx_req_plan (plan_id),
    INDEX idx_req_requester (requester_id)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4;

CREATE TABLE Purchase_Requisition_Items (
    pri_id INT AUTO_INCREMENT PRIMARY KEY,
    requisition_id INT NOT NULL,
    plan_item_id INT,
    product_id INT,
    product_code VARCHAR(50),
    product_name VARCHAR(255),
    spec TEXT,
    uom VARCHAR(50),
    requested_qty DECIMAL(18, 2) NOT NULL,
    target_unit_price DECIMAL(18, 2),
    suggested_vendor_id INT,
    note TEXT,
    FOREIGN KEY (requisition_id) REFERENCES Purchase_Requisitions(requisition_id) ON DELETE CASCADE,
    FOREIGN KEY (plan_item_id) REFERENCES Purchase_Plan_Items(plan_item_id) ON DELETE SET NULL,
    FOREIGN KEY (product_id) REFERENCES Products(product_id) ON DELETE SET NULL,
    FOREIGN KEY (suggested_vendor_id) REFERENCES Vendors(vendor_id) ON DELETE SET NULL,
    INDEX idx_pri_requisition (requisition_id),
    INDEX idx_pri_product (product_id)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4;

CREATE TABLE RFQs (
    rfq_id INT AUTO_INCREMENT PRIMARY KEY,
    rfq_no VARCHAR(30) UNIQUE NOT NULL,
    requisition_id INT NOT NULL,
    issue_date DATE,
    due_date DATE,
    status ENUM('Draft', 'Pending', 'Sent', 'Closed', 'Cancelled') DEFAULT 'Draft',
    selected_vendor_id INT,
    created_by INT,
    notes TEXT,
    created_at DATETIME DEFAULT CURRENT_TIMESTAMP,
    updated_at DATETIME DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
    deleted_at DATETIME DEFAULT NULL,
    FOREIGN KEY (requisition_id) REFERENCES Purchase_Requisitions(requisition_id) ON DELETE CASCADE,
    FOREIGN KEY (created_by) REFERENCES Users(user_id) ON DELETE SET NULL,
    FOREIGN KEY (selected_vendor_id) REFERENCES Vendors(vendor_id) ON DELETE SET NULL,
    INDEX idx_rfq_no (rfq_no),
    INDEX idx_rfq_status (status, deleted_at),
    INDEX idx_rfq_requisition (requisition_id)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4;

CREATE TABLE RFQ_Items (
    rfq_item_id INT AUTO_INCREMENT PRIMARY KEY,
    rfq_id INT NOT NULL,
    pri_id INT,
    product_id INT,
    product_code VARCHAR(50),
    product_name VARCHAR(255),
    spec TEXT,
    uom VARCHAR(50),
    quantity DECIMAL(18, 2) NOT NULL,
    note TEXT,
    FOREIGN KEY (rfq_id) REFERENCES RFQs(rfq_id) ON DELETE CASCADE,
    FOREIGN KEY (pri_id) REFERENCES Purchase_Requisition_Items(pri_id) ON DELETE SET NULL,
    FOREIGN KEY (product_id) REFERENCES Products(product_id) ON DELETE SET NULL,
    INDEX idx_rfq_item_rfq (rfq_id),
    INDEX idx_rfq_item_product (product_id)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4;

CREATE TABLE RFQ_Vendors (
    rfq_id INT NOT NULL,
    vendor_id INT NOT NULL,
    status ENUM('Invited', 'Quoted', 'Declined') DEFAULT 'Invited',
    PRIMARY KEY (rfq_id, vendor_id),
    FOREIGN KEY (rfq_id) REFERENCES RFQs(rfq_id) ON DELETE CASCADE,
    FOREIGN KEY (vendor_id) REFERENCES Vendors(vendor_id) ON DELETE CASCADE,
    INDEX idx_rfq_vendor_vendor (vendor_id)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4;

CREATE TABLE Purchase_Quotations (
    pq_id INT AUTO_INCREMENT PRIMARY KEY,
    pq_no VARCHAR(30) UNIQUE NOT NULL,
    rfq_id INT NOT NULL,
    vendor_id INT NOT NULL,
    pq_date DATETIME DEFAULT CURRENT_TIMESTAMP,
    valid_until DATE,
    is_tax_included TINYINT(1) DEFAULT 0,
    delivery_terms VARCHAR(255),
    payment_terms VARCHAR(255),
    lead_time_days INT,
    warranty_months INT,
    header_discount DECIMAL(18, 2) DEFAULT 0,
    shipping_cost DECIMAL(18, 2) DEFAULT 0,
    total_amount DECIMAL(18, 2) DEFAULT 0,
    status ENUM('Pending', 'Approved', 'Rejected') DEFAULT 'Pending',
    created_by INT,
    notes TEXT,
    created_at DATETIME DEFAULT CURRENT_TIMESTAMP,
    updated_at DATETIME DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
    deleted_at DATETIME DEFAULT NULL,
    FOREIGN KEY (rfq_id) REFERENCES RFQs(rfq_id) ON DELETE CASCADE,
    FOREIGN KEY (vendor_id) REFERENCES Vendors(vendor_id) ON DELETE CASCADE,
    FOREIGN KEY (created_by) REFERENCES Users(user_id) ON DELETE SET NULL,
    INDEX idx_pq_no (pq_no),
    INDEX idx_pq_status (status, deleted_at),
    INDEX idx_pq_rfq (rfq_id),
    INDEX idx_pq_vendor (vendor_id)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4;

CREATE TABLE Purchase_Quotation_Items (
    pq_item_id INT AUTO_INCREMENT PRIMARY KEY,
    pq_id INT NOT NULL,
    rfq_item_id INT NOT NULL,
    product_id INT,
    quantity DECIMAL(18, 2) NOT NULL,
    unit_price DECIMAL(18, 2) NOT NULL,
    tax_rate DECIMAL(5, 2),
    tax_amount DECIMAL(18, 2),
    line_total DECIMAL(18, 2) NOT NULL,
    remark TEXT,
    FOREIGN KEY (pq_id) REFERENCES Purchase_Quotations(pq_id) ON DELETE CASCADE,
    FOREIGN KEY (rfq_item_id) REFERENCES RFQ_Items(rfq_item_id) ON DELETE CASCADE,
    FOREIGN KEY (product_id) REFERENCES Products(product_id) ON DELETE SET NULL,
    INDEX idx_pqi_pq (pq_id),
    INDEX idx_pqi_product (product_id)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4;

CREATE TABLE Purchase_Orders (
    order_id INT AUTO_INCREMENT PRIMARY KEY,
    po_no VARCHAR(30) UNIQUE NOT NULL,
    vendor_id INT NOT NULL,
    pq_id INT,
    order_date DATETIME DEFAULT CURRENT_TIMESTAMP,
    status ENUM('Pending', 'Approved', 'Sent', 'Completed', 'Cancelled') DEFAULT 'Pending',
    approval_status ENUM('Pending', 'Approved', 'Rejected') DEFAULT 'Pending',
    approver_id INT,
    approved_at DATETIME,
    payment_terms VARCHAR(255),
    delivery_date DATETIME,
    shipping_address TEXT,
    total_before_tax DECIMAL(18, 2) DEFAULT 0,
    tax_amount DECIMAL(18, 2) DEFAULT 0,
    total_after_tax DECIMAL(18, 2) DEFAULT 0,
    created_by INT,
    updated_by INT,
    created_at DATETIME DEFAULT CURRENT_TIMESTAMP,
    updated_at DATETIME DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
    deleted_at DATETIME DEFAULT NULL,
    FOREIGN KEY (vendor_id) REFERENCES Vendors(vendor_id) ON DELETE RESTRICT,
    FOREIGN KEY (pq_id) REFERENCES Purchase_Quotations(pq_id) ON DELETE SET NULL,
    FOREIGN KEY (approver_id) REFERENCES Users(user_id) ON DELETE SET NULL,
    FOREIGN KEY (created_by) REFERENCES Users(user_id) ON DELETE SET NULL,
    FOREIGN KEY (updated_by) REFERENCES Users(user_id) ON DELETE SET NULL,
    INDEX idx_po_no (po_no),
    INDEX idx_po_status (status, approval_status, deleted_at),
    INDEX idx_po_vendor (vendor_id)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4;

CREATE TABLE Purchase_Order_Items (
    poi_id INT AUTO_INCREMENT PRIMARY KEY,
    order_id INT NOT NULL,
    pq_item_id INT,
    product_id INT NOT NULL,
    uom VARCHAR(50),
    quantity DECIMAL(18, 2) NOT NULL,
    unit_price DECIMAL(18, 2) NOT NULL,
    tax_rate DECIMAL(5, 2),
    tax_amount DECIMAL(18, 2),
    line_total DECIMAL(18, 2) NOT NULL,
    delivery_date DATE,
    note TEXT,
    FOREIGN KEY (order_id) REFERENCES Purchase_Orders(order_id) ON DELETE CASCADE,
    FOREIGN KEY (pq_item_id) REFERENCES Purchase_Quotation_Items(pq_item_id) ON DELETE SET NULL,
    FOREIGN KEY (product_id) REFERENCES Products(product_id) ON DELETE RESTRICT,
    INDEX idx_poi_order (order_id),
    INDEX idx_poi_product (product_id)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4;

CREATE TABLE Goods_Receipts (
    receipt_id INT AUTO_INCREMENT PRIMARY KEY,
    receipt_no VARCHAR(30) UNIQUE NOT NULL,
    order_id INT NOT NULL,
    warehouse_id INT NOT NULL,
    received_date DATETIME DEFAULT CURRENT_TIMESTAMP,
    status ENUM('Pending', 'Approved', 'Rejected') DEFAULT 'Pending',
    created_by INT,
    approved_by INT,
    approved_at DATETIME,
    created_at DATETIME DEFAULT CURRENT_TIMESTAMP,
    updated_at DATETIME DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
    deleted_at DATETIME DEFAULT NULL,
    FOREIGN KEY (order_id) REFERENCES Purchase_Orders(order_id) ON DELETE CASCADE,
    FOREIGN KEY (warehouse_id) REFERENCES Warehouses(warehouse_id) ON DELETE RESTRICT,
    FOREIGN KEY (created_by) REFERENCES Users(user_id) ON DELETE SET NULL,
    FOREIGN KEY (approved_by) REFERENCES Users(user_id) ON DELETE SET NULL,
    INDEX idx_gr_no (receipt_no),
    INDEX idx_gr_status (status, deleted_at),
    INDEX idx_gr_order (order_id),
    INDEX idx_gr_warehouse (warehouse_id)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4;

CREATE TABLE Goods_Receipt_Items (
    gri_id INT AUTO_INCREMENT PRIMARY KEY,
    receipt_id INT NOT NULL,
    poi_id INT NOT NULL,
    product_id INT NOT NULL,
    received_qty DECIMAL(18, 2) NOT NULL,
    accepted_qty DECIMAL(18, 2) NOT NULL DEFAULT 0,
    remark TEXT,
    FOREIGN KEY (receipt_id) REFERENCES Goods_Receipts(receipt_id) ON DELETE CASCADE,
    FOREIGN KEY (poi_id) REFERENCES Purchase_Order_Items(poi_id) ON DELETE CASCADE,
    FOREIGN KEY (product_id) REFERENCES Products(product_id) ON DELETE RESTRICT,
    INDEX idx_gri_receipt (receipt_id),
    INDEX idx_gri_product (product_id)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4;

CREATE TABLE Purchase_Deliveries (
    pd_id INT AUTO_INCREMENT PRIMARY KEY,
    pd_no VARCHAR(30) UNIQUE NOT NULL,
    order_id INT NOT NULL,
    delivery_date DATETIME DEFAULT CURRENT_TIMESTAMP,
    vendor_id INT NOT NULL,
    status ENUM('Pending', 'Shipped', 'Delivered', 'Cancelled') DEFAULT 'Pending',
    notes TEXT,
    created_by INT,
    created_at DATETIME DEFAULT CURRENT_TIMESTAMP,
    updated_at DATETIME DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
    deleted_at DATETIME DEFAULT NULL,
    FOREIGN KEY (order_id) REFERENCES Purchase_Orders(order_id) ON DELETE CASCADE,
    FOREIGN KEY (vendor_id) REFERENCES Vendors(vendor_id) ON DELETE RESTRICT,
    FOREIGN KEY (created_by) REFERENCES Users(user_id) ON DELETE SET NULL,
    INDEX idx_pd_no (pd_no),
    INDEX idx_pd_status (status, deleted_at),
    INDEX idx_pd_order (order_id)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4;

CREATE TABLE Purchase_Delivery_Items (
    pdi_id INT AUTO_INCREMENT PRIMARY KEY,
    pd_id INT NOT NULL,
    poi_id INT NOT NULL,
    product_id INT NOT NULL,
    shipped_qty DECIMAL(18, 2) NOT NULL,
    note TEXT,
    FOREIGN KEY (pd_id) REFERENCES Purchase_Deliveries(pd_id) ON DELETE CASCADE,
    FOREIGN KEY (poi_id) REFERENCES Purchase_Order_Items(poi_id) ON DELETE CASCADE,
    FOREIGN KEY (product_id) REFERENCES Products(product_id) ON DELETE RESTRICT,
    INDEX idx_pdi_pd (pd_id),
    INDEX idx_pdi_product (product_id)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4;

CREATE TABLE AP_Invoices (
    ap_invoice_id INT AUTO_INCREMENT PRIMARY KEY,
    invoice_no VARCHAR(50) UNIQUE NOT NULL,
    vendor_id INT NOT NULL,
    order_id INT,
    receipt_id INT,
    invoice_date DATE,
    due_date DATE,
    subtotal DECIMAL(18, 2) DEFAULT 0,
    tax_amount DECIMAL(18, 2) DEFAULT 0,
    total_amount DECIMAL(18, 2) DEFAULT 0,
    balance_amount DECIMAL(18, 2) DEFAULT 0,
    status ENUM('Unpaid', 'Partially Paid', 'Paid', 'Cancelled') DEFAULT 'Unpaid',
    notes TEXT,
    created_at DATETIME DEFAULT CURRENT_TIMESTAMP,
    updated_at DATETIME DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
    deleted_at DATETIME DEFAULT NULL,
    FOREIGN KEY (vendor_id) REFERENCES Vendors(vendor_id) ON DELETE RESTRICT,
    FOREIGN KEY (order_id) REFERENCES Purchase_Orders(order_id) ON DELETE SET NULL,
    FOREIGN KEY (receipt_id) REFERENCES Goods_Receipts(receipt_id) ON DELETE SET NULL,
    INDEX idx_ap_invoice_no (invoice_no),
    INDEX idx_ap_status (status, deleted_at),
    INDEX idx_ap_vendor (vendor_id),
    INDEX idx_ap_due_date (due_date)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4;

CREATE TABLE AP_Invoice_Items (
    api_id INT AUTO_INCREMENT PRIMARY KEY,
    ap_invoice_id INT NOT NULL,
    poi_id INT,
    gri_id INT,
    description VARCHAR(255),
    quantity DECIMAL(18, 2),
    unit_price DECIMAL(18, 2),
    tax_rate DECIMAL(5, 2),
    line_total DECIMAL(18, 2),
    FOREIGN KEY (ap_invoice_id) REFERENCES AP_Invoices(ap_invoice_id) ON DELETE CASCADE,
    FOREIGN KEY (poi_id) REFERENCES Purchase_Order_Items(poi_id) ON DELETE SET NULL,
    FOREIGN KEY (gri_id) REFERENCES Goods_Receipt_Items(gri_id) ON DELETE SET NULL,
    INDEX idx_api_invoice (ap_invoice_id)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4;

CREATE TABLE AP_Payments (
    ap_payment_id INT AUTO_INCREMENT PRIMARY KEY,
    ap_invoice_id INT NOT NULL,
    payment_date DATETIME DEFAULT CURRENT_TIMESTAMP,
    amount DECIMAL(18, 2) NOT NULL,
    method VARCHAR(50),
    reference_no VARCHAR(100),
    notes TEXT,
    created_at DATETIME DEFAULT CURRENT_TIMESTAMP,
    FOREIGN KEY (ap_invoice_id) REFERENCES AP_Invoices(ap_invoice_id) ON DELETE CASCADE,
    INDEX idx_app_invoice (ap_invoice_id),
    INDEX idx_app_date (payment_date)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4;

-- =====================================================
-- SALES FLOW
-- =====================================================

CREATE TABLE Sales_Quotations (
    sq_id INT AUTO_INCREMENT PRIMARY KEY,
    quotation_no VARCHAR(30) UNIQUE NOT NULL,
    customer_id INT NOT NULL,
    quotation_date DATETIME DEFAULT CURRENT_TIMESTAMP,
    valid_until DATE,
    payment_terms VARCHAR(255),
    delivery_terms VARCHAR(255),
    header_discount DECIMAL(18, 2) DEFAULT 0,
    subtotal DECIMAL(18, 2) DEFAULT 0,
    tax_amount DECIMAL(18, 2) DEFAULT 0,
    total_amount DECIMAL(18, 2) DEFAULT 0,
    status ENUM('Draft', 'Active', 'Converted', 'Cancelled', 'Expired') DEFAULT 'Active',
    created_by INT,
    updated_by INT,
    notes TEXT,
    created_at DATETIME DEFAULT CURRENT_TIMESTAMP,
    updated_at DATETIME DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
    deleted_at DATETIME DEFAULT NULL,
    FOREIGN KEY (customer_id) REFERENCES Customers(customer_id) ON DELETE RESTRICT,
    FOREIGN KEY (created_by) REFERENCES Users(user_id) ON DELETE SET NULL,
    FOREIGN KEY (updated_by) REFERENCES Users(user_id) ON DELETE SET NULL,
    INDEX idx_sq_no (quotation_no),
    INDEX idx_sq_status (status, deleted_at),
    INDEX idx_sq_customer (customer_id)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4;

CREATE TABLE Sales_Quotation_Items (
    sqi_id INT AUTO_INCREMENT PRIMARY KEY,
    sq_id INT NOT NULL,
    product_id INT NOT NULL,
    uom VARCHAR(50),
    quantity DECIMAL(18, 2) NOT NULL,
    unit_price DECIMAL(18, 2) NOT NULL,
    discount_amount DECIMAL(18, 2) DEFAULT 0,
    tax_rate DECIMAL(5, 2),
    tax_amount DECIMAL(18, 2) DEFAULT 0,
    line_total DECIMAL(18, 2) NOT NULL,
    note TEXT,
    FOREIGN KEY (sq_id) REFERENCES Sales_Quotations(sq_id) ON DELETE CASCADE,
    FOREIGN KEY (product_id) REFERENCES Products(product_id) ON DELETE RESTRICT,
    INDEX idx_sqi_sq (sq_id),
    INDEX idx_sqi_product (product_id)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4;

CREATE TABLE Sales_Orders (
    so_id INT AUTO_INCREMENT PRIMARY KEY,
    so_no VARCHAR(30) UNIQUE NOT NULL,
    customer_id INT NOT NULL,
    sq_id INT,
    order_date DATETIME DEFAULT CURRENT_TIMESTAMP,
    status ENUM('Pending', 'Approved', 'Fulfilled', 'Cancelled') DEFAULT 'Pending',
    approval_status ENUM('Pending', 'Approved', 'Rejected') DEFAULT 'Pending',
    approver_id INT,
    approved_at DATETIME,
    shipping_address TEXT,
    payment_terms VARCHAR(255),
    subtotal DECIMAL(18, 2) DEFAULT 0,
    tax_amount DECIMAL(18, 2) DEFAULT 0,
    total_amount DECIMAL(18, 2) DEFAULT 0,
    created_by INT,
    updated_by INT,
    notes TEXT,
    created_at DATETIME DEFAULT CURRENT_TIMESTAMP,
    updated_at DATETIME DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
    deleted_at DATETIME DEFAULT NULL,
    FOREIGN KEY (customer_id) REFERENCES Customers(customer_id) ON DELETE RESTRICT,
    FOREIGN KEY (sq_id) REFERENCES Sales_Quotations(sq_id) ON DELETE SET NULL,
    FOREIGN KEY (approver_id) REFERENCES Users(user_id) ON DELETE SET NULL,
    FOREIGN KEY (created_by) REFERENCES Users(user_id) ON DELETE SET NULL,
    FOREIGN KEY (updated_by) REFERENCES Users(user_id) ON DELETE SET NULL,
    INDEX idx_so_no (so_no),
    INDEX idx_so_status (status, approval_status, deleted_at),
    INDEX idx_so_customer (customer_id)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4;

CREATE TABLE Sales_Order_Items (
    soi_id INT AUTO_INCREMENT PRIMARY KEY,
    so_id INT NOT NULL,
    product_id INT NOT NULL,
    uom VARCHAR(50),
    quantity DECIMAL(18, 2) NOT NULL,
    unit_price DECIMAL(18, 2) NOT NULL,
    discount_amount DECIMAL(18, 2) DEFAULT 0,
    tax_rate DECIMAL(5, 2),
    tax_amount DECIMAL(18, 2) DEFAULT 0,
    line_total DECIMAL(18, 2) NOT NULL,
    warehouse_id INT,
    note TEXT,
    FOREIGN KEY (so_id) REFERENCES Sales_Orders(so_id) ON DELETE CASCADE,
    FOREIGN KEY (product_id) REFERENCES Products(product_id) ON DELETE RESTRICT,
    FOREIGN KEY (warehouse_id) REFERENCES Warehouses(warehouse_id) ON DELETE SET NULL,
    INDEX idx_soi_so (so_id),
    INDEX idx_soi_product (product_id),
    INDEX idx_soi_warehouse (warehouse_id)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4;

CREATE TABLE Deliveries (
    delivery_id INT AUTO_INCREMENT PRIMARY KEY,
    delivery_no VARCHAR(30) UNIQUE NOT NULL,
    so_id INT NOT NULL,
    delivery_date DATETIME DEFAULT CURRENT_TIMESTAMP,
    warehouse_id INT NOT NULL,
    status ENUM('Pending', 'Approved', 'Rejected') DEFAULT 'Pending',
    created_by INT,
    approved_by INT,
    approved_at DATETIME,
    notes TEXT,
    created_at DATETIME DEFAULT CURRENT_TIMESTAMP,
    updated_at DATETIME DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
    deleted_at DATETIME DEFAULT NULL,
    FOREIGN KEY (so_id) REFERENCES Sales_Orders(so_id) ON DELETE CASCADE,
    FOREIGN KEY (warehouse_id) REFERENCES Warehouses(warehouse_id) ON DELETE RESTRICT,
    FOREIGN KEY (created_by) REFERENCES Users(user_id) ON DELETE SET NULL,
    FOREIGN KEY (approved_by) REFERENCES Users(user_id) ON DELETE SET NULL,
    INDEX idx_del_no (delivery_no),
    INDEX idx_del_status (status, deleted_at),
    INDEX idx_del_so (so_id),
    INDEX idx_del_warehouse (warehouse_id)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4;

CREATE TABLE Delivery_Items (
    di_id INT AUTO_INCREMENT PRIMARY KEY,
    delivery_id INT NOT NULL,
    soi_id INT NOT NULL,
    product_id INT NOT NULL,
    issued_qty DECIMAL(18, 2) NOT NULL,
    note TEXT,
    FOREIGN KEY (delivery_id) REFERENCES Deliveries(delivery_id) ON DELETE CASCADE,
    FOREIGN KEY (soi_id) REFERENCES Sales_Order_Items(soi_id) ON DELETE CASCADE,
    FOREIGN KEY (product_id) REFERENCES Products(product_id) ON DELETE RESTRICT,
    INDEX idx_di_delivery (delivery_id),
    INDEX idx_di_product (product_id)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4;

CREATE TABLE AR_Invoices (
    ar_invoice_id INT AUTO_INCREMENT PRIMARY KEY,
    invoice_no VARCHAR(50) UNIQUE NOT NULL,
    customer_id INT NOT NULL,
    so_id INT,
    delivery_id INT,
    invoice_date DATE DEFAULT (CURRENT_DATE()),
    due_date DATE,
    subtotal DECIMAL(18, 2) DEFAULT 0,
    tax_amount DECIMAL(18, 2) DEFAULT 0,
    total_amount DECIMAL(18, 2) DEFAULT 0,
    balance_amount DECIMAL(18, 2) DEFAULT 0,
    status ENUM('Unpaid', 'Partially Paid', 'Paid', 'Cancelled') DEFAULT 'Unpaid',
    notes TEXT,
    created_at DATETIME DEFAULT CURRENT_TIMESTAMP,
    updated_at DATETIME DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
    deleted_at DATETIME DEFAULT NULL,
    FOREIGN KEY (customer_id) REFERENCES Customers(customer_id) ON DELETE RESTRICT,
    FOREIGN KEY (so_id) REFERENCES Sales_Orders(so_id) ON DELETE SET NULL,
    FOREIGN KEY (delivery_id) REFERENCES Deliveries(delivery_id) ON DELETE SET NULL,
    INDEX idx_ar_invoice_no (invoice_no),
    INDEX idx_ar_status (status, deleted_at),
    INDEX idx_ar_customer (customer_id),
    INDEX idx_ar_due_date (due_date)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4;

CREATE TABLE AR_Invoice_Items (
    ari_id INT AUTO_INCREMENT PRIMARY KEY,
    ar_invoice_id INT NOT NULL,
    soi_id INT,
    di_id INT,
    description VARCHAR(255),
    quantity DECIMAL(18, 2),
    unit_price DECIMAL(18, 2),
    tax_rate DECIMAL(5, 2),
    tax_amount DECIMAL(18, 2),
    line_total DECIMAL(18, 2),
    FOREIGN KEY (ar_invoice_id) REFERENCES AR_Invoices(ar_invoice_id) ON DELETE CASCADE,
    FOREIGN KEY (soi_id) REFERENCES Sales_Order_Items(soi_id) ON DELETE SET NULL,
    FOREIGN KEY (di_id) REFERENCES Delivery_Items(di_id) ON DELETE SET NULL,
    INDEX idx_ari_invoice (ar_invoice_id)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4;

CREATE TABLE AR_Payments (
    ar_payment_id INT AUTO_INCREMENT PRIMARY KEY,
    ar_invoice_id INT NOT NULL,
    payment_date DATETIME DEFAULT CURRENT_TIMESTAMP,
    amount DECIMAL(18, 2) NOT NULL,
    method VARCHAR(50),
    reference_no VARCHAR(100),
    notes TEXT,
    created_at DATETIME DEFAULT CURRENT_TIMESTAMP,
    FOREIGN KEY (ar_invoice_id) REFERENCES AR_Invoices(ar_invoice_id) ON DELETE CASCADE,
    INDEX idx_arp_invoice (ar_invoice_id),
    INDEX idx_arp_date (payment_date)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4;

-- =====================================================
-- INVENTORY MANAGEMENT
-- =====================================================

CREATE TABLE Stock_Transfers (
    transfer_id INT AUTO_INCREMENT PRIMARY KEY,
    from_warehouse_id INT,
    to_warehouse_id INT,
    product_id INT NOT NULL,
    quantity DECIMAL(18, 2) NOT NULL,
    transfer_date DATETIME DEFAULT CURRENT_TIMESTAMP,
    transfer_type VARCHAR(100),
    status ENUM('Pending', 'Shipped', 'Received', 'Cancelled') DEFAULT 'Pending',
    created_by INT,
    updated_by INT,
    created_at DATETIME DEFAULT CURRENT_TIMESTAMP,
    updated_at DATETIME DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
    deleted_at DATETIME DEFAULT NULL,
    FOREIGN KEY (from_warehouse_id) REFERENCES Warehouses(warehouse_id) ON DELETE SET NULL,
    FOREIGN KEY (to_warehouse_id) REFERENCES Warehouses(warehouse_id) ON DELETE SET NULL,
    FOREIGN KEY (product_id) REFERENCES Products(product_id) ON DELETE RESTRICT,
    FOREIGN KEY (created_by) REFERENCES Users(user_id) ON DELETE SET NULL,
    FOREIGN KEY (updated_by) REFERENCES Users(user_id) ON DELETE SET NULL,
    INDEX idx_transfer_status (status, deleted_at),
    INDEX idx_transfer_from (from_warehouse_id),
    INDEX idx_transfer_to (to_warehouse_id),
    INDEX idx_transfer_product (product_id),
    INDEX idx_transfer_date (transfer_date)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4;

CREATE TABLE Inventory_Checks (
    check_id INT AUTO_INCREMENT PRIMARY KEY,
    warehouse_id INT NOT NULL,
    checked_by INT,
    check_date DATETIME DEFAULT CURRENT_TIMESTAMP,
    status ENUM('Pending', 'Completed', 'Cancelled') DEFAULT 'Pending',
    notes TEXT,
    created_at DATETIME DEFAULT CURRENT_TIMESTAMP,
    updated_at DATETIME DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
    deleted_at DATETIME DEFAULT NULL,
    FOREIGN KEY (warehouse_id) REFERENCES Warehouses(warehouse_id) ON DELETE CASCADE,
    FOREIGN KEY (checked_by) REFERENCES Users(user_id) ON DELETE SET NULL,
    INDEX idx_check_status (status, deleted_at),
    INDEX idx_check_warehouse (warehouse_id),
    INDEX idx_check_date (check_date)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4;

CREATE TABLE Inventory_Check_Items (
    ici_id INT AUTO_INCREMENT PRIMARY KEY,
    check_id INT NOT NULL,
    product_id INT NOT NULL,
    expected_qty DECIMAL(18, 2) NOT NULL,
    actual_qty DECIMAL(18, 2) NOT NULL,
    discrepancy DECIMAL(18, 2) AS (actual_qty - expected_qty) STORED,
    note TEXT,
    FOREIGN KEY (check_id) REFERENCES Inventory_Checks(check_id) ON DELETE CASCADE,
    FOREIGN KEY (product_id) REFERENCES Products(product_id) ON DELETE RESTRICT,
    INDEX idx_ici_check (check_id),
    INDEX idx_ici_product (product_id)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4;

-- =====================================================
-- REPORTING & LOGGING
-- =====================================================

CREATE TABLE Reports (
    report_id INT AUTO_INCREMENT PRIMARY KEY,
    name VARCHAR(100) NOT NULL,
    type ENUM('Inventory', 'Sales', 'Purchase', 'Financial') NOT NULL,
    status ENUM('Pending', 'Completed', 'Failed') DEFAULT 'Pending',
    description TEXT,
    report_data JSON,
    generated_by INT,
    generated_at DATETIME DEFAULT CURRENT_TIMESTAMP,
    FOREIGN KEY (generated_by) REFERENCES Users(user_id) ON DELETE SET NULL,
    INDEX idx_report_type (type),
    INDEX idx_report_status (status),
    INDEX idx_report_date (generated_at)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4;

CREATE TABLE Activity_Logs (
    log_id INT AUTO_INCREMENT PRIMARY KEY,
    user_id INT,
    action VARCHAR(255) NOT NULL,
    description TEXT,
    activity_type VARCHAR(50),
    entity_id INT,
    ip_address VARCHAR(50),
    device_info VARCHAR(255),
    log_date DATETIME DEFAULT CURRENT_TIMESTAMP,
    FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE SET NULL,
    INDEX idx_log_user (user_id),
    INDEX idx_log_type (activity_type),
    INDEX idx_log_entity (entity_id),
    INDEX idx_log_date (log_date)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4;

-- =====================================================
-- ADDITIONAL INDEXES FOR PERFORMANCE
-- =====================================================

-- Composite indexes for common queries
CREATE INDEX idx_users_department_status_deleted ON Users(department_id, status, deleted_at);
CREATE INDEX idx_products_category_status_deleted ON Products(category_id, status, deleted_at);
CREATE INDEX idx_warehouses_status_deleted ON Warehouses(status, deleted_at);

-- Date range indexes for reporting
CREATE INDEX idx_users_created_range ON Users(created_at);
CREATE INDEX idx_products_created_range ON Products(created_at);
CREATE INDEX idx_purchase_orders_created_range ON Purchase_Orders(created_at);
CREATE INDEX idx_sales_orders_created_range ON Sales_Orders(created_at);

-- Status-based indexes for workflow
CREATE INDEX idx_purchase_requisitions_approval ON Purchase_Requisitions(approval_status, status);
CREATE INDEX idx_purchase_orders_approval ON Purchase_Orders(approval_status, status);
CREATE INDEX idx_sales_orders_approval ON Sales_Orders(approval_status, status);

-- Vendor/Customer relationship indexes
CREATE INDEX idx_purchase_orders_vendor_status ON Purchase_Orders(vendor_id, status);
CREATE INDEX idx_sales_orders_customer_status ON Sales_Orders(customer_id, status);

-- Inventory tracking indexes
CREATE INDEX idx_warehouse_stock_product ON Warehouse_Stock(product_id, quantity);
CREATE INDEX idx_stock_transfers_product_date ON Stock_Transfers(product_id, transfer_date);

-- Activity logging indexes for audit trails
CREATE INDEX idx_activity_logs_user_date ON Activity_Logs(user_id, log_date);
CREATE INDEX idx_activity_logs_entity_type ON Activity_Logs(entity_id, activity_type);
